import hashlib
import time
import base58

class Block:
    def __init__(self, index, transactions, previous_hash):
        self.index = index
        self.timestamp = time.time()
        self.transactions = transactions  # List of transactions
        self.previous_hash = previous_hash
        self.nonce = 0
        self.hash = self.compute_hash()
    
    def compute_hash(self):
        block_data = (
            str(self.index) + 
            str(self.timestamp) + 
            str(self.transactions) + 
            str(self.previous_hash) + 
            str(self.nonce)
        )
        sha256_hash = hashlib.sha256(block_data.encode()).hexdigest()
        return sha256_hash
    
    def proof_of_work(self, difficulty):
        target = '0' * difficulty
        while not self.hash.startswith(target):
            self.nonce += 1
            self.hash = self.compute_hash()

class Blockchain:
    def __init__(self, difficulty=4):
        self.chain = []
        self.difficulty = difficulty
        self.create_genesis_block()
    
    def create_genesis_block(self):
        # Genesis block with a single dummy transaction
        genesis_transaction = {
            "version": 1,
            "in_counter": 0,
            "inputs": [],
            "out_counter": 1,
            "outputs": [{"value": 100, "address": "Genesis"}],
            "lock_time": 0
        }
        genesis_block = Block(0, [genesis_transaction], "0")
        genesis_block.proof_of_work(self.difficulty)
        self.chain.append(genesis_block)
    
    def add_block(self, transactions):
        previous_block = self.chain[-1]
        new_block = Block(len(self.chain), transactions, previous_block.hash)
        new_block.proof_of_work(self.difficulty)
        self.chain.append(new_block)
    
    def is_chain_valid(self):
        for i in range(1, len(self.chain)):
            current = self.chain[i]
            previous = self.chain[i - 1]
            if current.hash != current.compute_hash() or current.previous_hash != previous.hash:
                return False
        return True

def bitcoin_style_hash(data):
    sha256_hash = hashlib.sha256(data.encode()).digest()
    ripemd160_hash = hashlib.new('ripemd160', sha256_hash).hexdigest()
    return ripemd160_hash

def generate_bitcoin_address(public_key_hash):
    version_byte = b'\x00'
    payload = version_byte + bytes.fromhex(public_key_hash)
    checksum = hashlib.sha256(hashlib.sha256(payload).digest()).digest()[:4]
    address_bytes = payload + checksum
    return base58.b58encode(address_bytes).decode()

# Create blockchain
blockchain = Blockchain()

# Define transactions with Bitcoin-style structure
transactions = [
    {
        "version": 1,
        "in_counter": 1,
        "inputs": [{"txid": "a1", "vout": 0}],
        "out_counter": 1,
        "outputs": [{"value": 10, "address": "Sana"}],
        "lock_time": 0
    },
    {
        "version": 1,
        "in_counter": 1,
        "inputs": [{"txid": "b2", "vout": 0}],
        "out_counter": 1,
        "outputs": [{"value": 4, "address": "Zain"}],
        "lock_time": 0
    },
    {
        "version": 1,
        "in_counter": 1,
        "inputs": [{"txid": "c3", "vout": 0}],
        "out_counter": 1,
        "outputs": [{"value": 2, "address": "Umaima"}],
        "lock_time": 0
    }
]

# Add transactions to the blockchain
for tx in transactions:
    blockchain.add_block([tx])

# Validate blockchain
print("Is blockchain valid?", blockchain.is_chain_valid())

# Print blockchain details
print("\nBlockchain Simulation:")
for block in blockchain.chain:
    print(f"Index: {block.index}")
    print(f"Timestamp: {time.ctime(block.timestamp)}")
    print(f"Transactions: {block.transactions}")
    print(f"Previous Hash: {block.previous_hash}")
    print(f"Current Hash: {block.hash}")
    print(f"Nonce: {block.nonce}")
    print("-" * 50)

# Generate Bitcoin-style hash and address
name = "Baryal"
bitcoin_hash = bitcoin_style_hash(name)
bitcoin_address = generate_bitcoin_address(bitcoin_hash)

print("Bitcoin-style Hash:", bitcoin_hash)
print("Generated Bitcoin Address:", bitcoin_address)